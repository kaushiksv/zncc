/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "zncc"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "zncc"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int use_gpu_flag;	/**< @brief Use GPU for computation. (default=off).  */
  const char *use_gpu_help; /**< @brief Use GPU for computation. help description.  */
  int maximum_disparity_arg;	/**< @brief The maximum disparity between images. (default='64').  */
  char * maximum_disparity_orig;	/**< @brief The maximum disparity between images. original value given at command line.  */
  const char *maximum_disparity_help; /**< @brief The maximum disparity between images. help description.  */
  int threshold_arg;	/**< @brief The threshold used for cross-checking. (default='8').  */
  char * threshold_orig;	/**< @brief The threshold used for cross-checking. original value given at command line.  */
  const char *threshold_help; /**< @brief The threshold used for cross-checking. help description.  */
  int window_size_arg;	/**< @brief Side of the window used for zncc. Must be odd. (Ex: 11, window has 121 elements) (default='9').  */
  char * window_size_orig;	/**< @brief Side of the window used for zncc. Must be odd. (Ex: 11, window has 121 elements) original value given at command line.  */
  const char *window_size_help; /**< @brief Side of the window used for zncc. Must be odd. (Ex: 11, window has 121 elements) help description.  */
  int neighbourhood_size_arg;	/**< @brief The neighbourhood size for occlusion filling. (default='8').  */
  char * neighbourhood_size_orig;	/**< @brief The neighbourhood size for occlusion filling. original value given at command line.  */
  const char *neighbourhood_size_help; /**< @brief The neighbourhood size for occlusion filling. help description.  */
  int show_status_flag;	/**< @brief Print status-update messages that describe the ongoing activity. (default=off).  */
  const char *show_status_help; /**< @brief Print status-update messages that describe the ongoing activity. help description.  */
  int platform_number_arg;	/**< @brief The platform number (different from platform ID) varies from 0..N_PLATFORMS-1. Use a tool like clinfo to customize this. (default='0').  */
  char * platform_number_orig;	/**< @brief The platform number (different from platform ID) varies from 0..N_PLATFORMS-1. Use a tool like clinfo to customize this. original value given at command line.  */
  const char *platform_number_help; /**< @brief The platform number (different from platform ID) varies from 0..N_PLATFORMS-1. Use a tool like clinfo to customize this. help description.  */
  int device_number_arg;	/**< @brief The device number (different from device ID) varies from 0..N_DEVICES-1. Use a tool like clinfo to customize this. (default='0').  */
  char * device_number_orig;	/**< @brief The device number (different from device ID) varies from 0..N_DEVICES-1. Use a tool like clinfo to customize this. original value given at command line.  */
  const char *device_number_help; /**< @brief The device number (different from device ID) varies from 0..N_DEVICES-1. Use a tool like clinfo to customize this. help description.  */
  int nthreads_arg;	/**< @brief Number of threads for zncc computation. Has no effect when using GPU. (default='1').  */
  char * nthreads_orig;	/**< @brief Number of threads for zncc computation. Has no effect when using GPU. original value given at command line.  */
  const char *nthreads_help; /**< @brief Number of threads for zncc computation. Has no effect when using GPU. help description.  */
  int skip_depthmapping_flag;	/**< @brief OBSELETE. Previously, this flag had been used to skip computation of preliminary depthmaps, and reuse previously output images. Has no effect when using GPU. This option will use images specified by --image-0 and --image-1 options. if ommitted, it looks for previously output files at ./outputs/ directory, and use them to perform just cross-checking and occlusion-filling. Missing files would cause the program to terminate. `d0_filepath` and `d1_filepath` in zncc.cpp define the default files that will be looked for. (default=off).  */
  const char *skip_depthmapping_help; /**< @brief OBSELETE. Previously, this flag had been used to skip computation of preliminary depthmaps, and reuse previously output images. Has no effect when using GPU. This option will use images specified by --image-0 and --image-1 options. if ommitted, it looks for previously output files at ./outputs/ directory, and use them to perform just cross-checking and occlusion-filling. Missing files would cause the program to terminate. `d0_filepath` and `d1_filepath` in zncc.cpp define the default files that will be looked for. help description.  */
  char * image_0_arg;	/**< @brief Image 0 filepath.  */
  char * image_0_orig;	/**< @brief Image 0 filepath original value given at command line.  */
  const char *image_0_help; /**< @brief Image 0 filepath help description.  */
  char * image_1_arg;	/**< @brief Image 1 filepath.  */
  char * image_1_orig;	/**< @brief Image 1 filepath original value given at command line.  */
  const char *image_1_help; /**< @brief Image 1 filepath help description.  */
  int shrink_by_arg;	/**< @brief Shrink factor to downscale image. Typically set to 1 when skipping depthmapping step. (default='4').  */
  char * shrink_by_orig;	/**< @brief Shrink factor to downscale image. Typically set to 1 when skipping depthmapping step. original value given at command line.  */
  const char *shrink_by_help; /**< @brief Shrink factor to downscale image. Typically set to 1 when skipping depthmapping step. help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int use_gpu_given ;	/**< @brief Whether use-gpu was given.  */
  unsigned int maximum_disparity_given ;	/**< @brief Whether maximum-disparity was given.  */
  unsigned int threshold_given ;	/**< @brief Whether threshold was given.  */
  unsigned int window_size_given ;	/**< @brief Whether window-size was given.  */
  unsigned int neighbourhood_size_given ;	/**< @brief Whether neighbourhood-size was given.  */
  unsigned int show_status_given ;	/**< @brief Whether show-status was given.  */
  unsigned int platform_number_given ;	/**< @brief Whether platform-number was given.  */
  unsigned int device_number_given ;	/**< @brief Whether device-number was given.  */
  unsigned int nthreads_given ;	/**< @brief Whether nthreads was given.  */
  unsigned int skip_depthmapping_given ;	/**< @brief Whether skip-depthmapping was given.  */
  unsigned int image_0_given ;	/**< @brief Whether image-0 was given.  */
  unsigned int image_1_given ;	/**< @brief Whether image-1 was given.  */
  unsigned int shrink_by_given ;	/**< @brief Whether shrink-by was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
